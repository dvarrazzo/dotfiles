" Copyright 2004, 2005, 2008 Develer S.r.l. (http://www.develer.com/)
" Copyright (C) 2008-2013 Daniele Varrazzo
" All rights reserved.

" note: to reload, use ':so %'


" General {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible        " Use Vim defaults (much better!)
set viminfo='20,\"50    " Read/write a .viminfo file, don't store more
                        " than 50 lines of registers
set history=50          " Keep 50 lines of command line history
set hidden              " Allow unsaved buffers to be put in background

" Enable UltiSnip plugin
set runtimepath+=~/.vim/bundles/UltiSnips

" Enable PyFlakes integration
set runtimepath+=~/.vim/bundles/pyflakes-vim

" Enable Tabular
set runtimepath+=~/.vim/bundles/tabular

" Enable NERDTree
set runtimepath+=~/.vim/bundles/nerdtree
"
" Enable ack.vim
set runtimepath+=~/.vim/bundles/ack

" Ansible
if v:version > 703
    set runtimepath+=~/.vim/bundles/ansible-vim
endif

" Enable pgsql.vim
set runtimepath+=~/.vim/bundles/pgsql

" note: closetag is enabled: use C-_ to close a tag.

"}}}

" Editing {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Enable IndentTab for every file.
" Note that this applies on ":tabe file", not on a naked ":tabe", that's
" confusing and probably messes up setting filetype and stuff too, which
" always seem to behave inconsistently.
autocmd BufRead,BufNewFile * call IndentTab#Set(1,0)

set wrap                " These guys will never learn the world stops at col 80
set bs=indent,eol,start " Allow backspacing over everything in insert mode
set showmatch           " Show matching parenthesis when writing
set tildeop             " ~ takes a movement command

set sidescroll=1        " Scoll 1 char at time left/right
set scrolloff=3         " How much to see around the cursor
set sidescrolloff=3
set showcmd             " Show partial commands

" When sudoed, disable yankring, or it will chown the histfile to root,
" creating errors at the next non-sudoed usage.
" Note the hack: g:yankring_enabled doesn't stop the bastard to touch the file.
if $USER == 'root'
    let loaded_yankring = 120
endif

" Hide the yankring history file.
let g:yankring_history_file = '.yankring_history'

" Use the global clipboard (don't need "+ anymore)
set clipboard=unnamed,unnamedplus,autoselect,exclude:cons\\\|linux
" note: appending after "exclude:" with "+unnamed" doesn't work.
" default was "autoselect,exclude:cons\\\|linux"

"}}}

" Keybindings {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" leader in coma
let mapleader = ","
" but keep the old one too
nmap \ ,

" make Y effect to end of line instead of whole line
" The function is required to avoid yankring to own the mapping.
function! YRRunAfterMaps()
    nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
endfunction
nnoremap Y y$

" go up/down one editor line, not one file line
" (don't jump over long lines wrapped
nnoremap j gj
vnoremap j gj
nnoremap k gk
vnoremap k gk

" scrolling on dope
nnoremap <C-j> 3gj
vnoremap <C-j> 3gj
nnoremap <C-k> 3gk
vnoremap <C-k> 3gk
nnoremap <C-l> W
vnoremap <C-l> E
nnoremap <C-h> B
vnoremap <C-h> gE

" I've clobbered the C-l for redraw :-\
nnoremap <leader>r :redraw!<CR>

" move around the splits with ,j etc.
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>h <C-w>h
nnoremap <leader>l <C-w>l

" move around the splits with Ctrl+Alt+j etc.
nnoremap <C-A-j> <C-w>j
nnoremap <C-A-k> <C-w>k
nnoremap <C-A-h> <C-w>h
nnoremap <C-A-l> <C-w>l
" Note: you may want to change the lock screen combination to Mod4-L...

" move splits up and down
nnoremap <leader>J <C-w>x<C-w>j
nnoremap <leader>K <C-w>k<C-w>x

" open new splits and move there
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>l

" no, I don't want your fucking help!
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" no ex mode (type visual to go back to sanity)
nnoremap Q <Nop>

" toggle list/nolist
nmap <leader><space> :set invlist<CR>

" Ctrl-V pastes from register in insert mode
inoremap <C-v> <C-r>"

" fix broken Page Up/Down
" http://vimrc-dissection.blogspot.com/2009/02/fixing-pageup-and-pagedown.html
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-O>1000<C-U>
imap <silent> <PageDown> <C-O>1000<C-D>
set nostartofline

" Search in history for common prefix with Ctrl-p
cnoremap <C-p> <Up>

" expand snippets with c-y instead of tab as it conflicts with IndentTab
" c-j conflict with the fast move down
let g:UltiSnipsExpandTrigger='<c-y>'
let g:UltiSnipsJumpForwardTrigger='<c-y>'

"}}}

" Syntax {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" note: you can use
"    vim: set filetype=rst:
" somewhere in a file to set its filetype

" Disable filetype, otherwise the runtimepath modifications won't take effect
filetype off

" Ubuntu vim addons. Includes golang.
" NOTE: Watch what's in that dir! The editexisting extension was slowing down
" gvim starting and generally doing what I don't want (I told you edit this
" file: bloody edit it, don't tell me it's open somewhere in my 18 desks).
set runtimepath+=/usr/share/vim/addons/

syntax on               " go for Vim syntax highlight
filetype plugin on      " enable loading filetype plugins
filetype indent on      " enable loading filetype intendation mode

" mark spacing errors in C/Java/Python sources
let c_space_errors=1
let java_space_errors=1
let python_space_errors_highlight=1

" set ai                " always set autoindenting on (broken)
" set smartindent       " bernie: indentation
" piro: trying if cindent avoids the hash to first column problem
" http://stackoverflow.com/questions/354097/
" piro: disabling cindent globally too because it messes up with text files.
" set cindent


" Display whitespaces errors (at eol, before tab)
syn match ExtraWhitespace /\s\+$\| \+\ze\t/
" This must be before colorscheme or it could be wiped off
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
autocmd ColorScheme * hi ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
" ... and must be added to every syntax
autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
" This would be more dramatic!
" highlight link ExtraWhitespace Error


" In text files, always limit the width of text to 78 characters
autocmd FileType text,rst,markdown setl tw=78

" 2 tabs indenting in *ml
autocmd FileType html,htmldjango,xml setl ts=2 | setl sw=2 | setl sts=2

" That's not Modula 2
autocmd BufRead,BufNewFile *.md set filetype=markdown

" tmpl files are django for me
autocmd BufRead,BufNewFile *.tmpl setl filetype=htmldjango

" cindent in c-style files
autocmd FileType c,cpp,java setl cindent

" postgresql syntax for .sql files
autocmd BufRead,BufNewFile *.sql setl filetype=pgsql | setl matchpairs-=<:>

"}}}

" Load/Save {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Autocomplete files like on bash, not on windows.
" Don't autocomplete the first occurrence but stop at the common prefix
set wildmenu
set wildmode=list:longest
set wildignore=*.o,*.pyc

if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
   set fileencodings=ucs-bom,utf-8,latin1
endif
set nobackup            " don't create .bak files
set noswapfile          " don't create .swp files

" When editing a file, always jump to the last cursor position
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif

" ...but not for git commit messages, please
autocmd BufReadPost COMMIT_EDITMSG exe "normal! gg"

" piro: use :O to open a file into an existing tab. Also testing with ,o
:command! -nargs=1 -complete=file O tab drop <args>
:nmap <leader>o <ESC>:tab drop

" avoid "press ENTER to continue after remote file load/save
let g:netrw_silent=1

" common misspells on save/exit
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q
:command! Qa qa

" nerdtree
let NERDTreeShowHidden=1
let NERDTreeRespectWildIgnore=1
let NERDTreeWinSize=21
let NERDTreeIgnore = ['\~$', '\.pyc$', '\.bak$', '^__pycache__$',
    \ '\.egg$[[dir]]', '\.egg-info$[[dir]]' ]

nmap <leader>t :NERDTreeToggle<CR>
nmap <leader>T :NERDTreeMirror<CR>

:command! HN echo
    \ "NERDTree cheatsheet: \n"
    \ "o: open file or dir \n"
    \ "O: open all subdirs \n"
    \ "X: close all subdirs \n"
    \ "i: open file in new split \n"
    \ "t: open file in new tab \n"
    \ "ma: create a new file/dir \n"
    \ "R: refresh"
    \ "F: show/hide files \n"
    \ "I: show/hide hidden files \n"
    \ "cd: change current dir"
    \ "C: change tree root dir \n"
    \ "u: tree root up one dir \n"
    \ "q: close"

"}}}

" Interface {{{
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Known terminals:
" - gnome terminal: &term == "xterm"
" - text shell: &term == "linux" (256 col not available)
" - gvim: "builtin_gui". But when loading the .vimrc it is an empty string,
"   so using has("gui_running") to check this case.
if &term=="xterm" || has("gui_running")
    set t_Co=256
    colorscheme desert256
endif

set background=dark
set guifont=Monospace\ 8 " smaller font
set statusline=%<%f%h%m%r\ %y%=[%b\ 0x%B]\ \ [%l,%c%V]\ %P
set laststatus=2        " Always show the status line
" set ruler             " Show the cursor position all the time
                        " Superseded by laststatus=2

" set guioptions+=b     " bernie: Add bottom horizontal scroll bar
set guioptions-=T       " aleph: Remove useless luser toolbar
set guioptions-=r       " piro: No scroll bars
set guioptions-=L       " not even at left

if version >= 703
    set colorcolumn=80  " Highlight Column of Hercules (don't go past there)
endif

" Not using it, and  taking some space I actually want
" if version >= 703
"   set relativenumber  " show offset from current line
" endif

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ",a:blinkon0"

" Prettier unwanted whitespace
" Note: to get the middle dot use C-k .M
set listchars=tab:\|·,trail:·,precedes:<,extends:>

" Mouse everywhere!
if has("mouse")
    set mouse=a
endif

set foldmethod=marker  " explicit markers {{{ and }}}

:command! HZ echo
    \ "folding cheatsheet: \n"
    \ "zf: create a new fold (movement or selection) \n"
    \ "za: toggle a fold \n"
    \ "zR: open all folds \n"
    \ "zM: close all folds \n"
    \ "zj: move down one fold \n"
    \ "zk: move up one fold \n"

" More readable folded color (on default color scheme)
" hi Folded guifg=Blue

" set visualbell        " Don't ring a bell on error
set novisualbell        " Enough with flashes
set winminheight=0      " Can squash unactive buffers to 0 lines
set noequalalways       " Don't resize buffers after split/close

" ctrl+shift+pages to rearrange tabs
" http://stackoverflow.com/questions/2106138/rearrange-tabs-with-the-mouse-in-gvim
function! TabLeft()
   let tab_number = tabpagenr() - 1
   if tab_number == 0
      execute "tabm" tabpagenr('$') - 1
   else
      execute "tabm" tab_number - 1
   endif
endfunction

function! TabRight()
   let tab_number = tabpagenr() - 1
   let last_tab_number = tabpagenr('$') - 1
   if tab_number == last_tab_number
      execute "tabm" 0
   else
      execute "tabm" tab_number + 1
   endif
endfunction

map <silent><C-S-PageUp> :execute TabLeft()<CR>
map <silent><C-S-PageDown> :execute TabRight()<CR>

"}}}

" Search {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set hlsearch            " Highlight when searching
set incsearch           " Incremental search
set ignorecase          " insensitive search
set smartcase           " if pattern contains uppercase chars,
                        " the search is case _sensitive_

" search highlighted text with //
vmap // y/<C-R>"<CR>

" remove search highlight with ,?; also close the location list
nmap <silent> <leader>? :nohlsearch<CR>:cclose<CR>

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

" Use The Silver Searcher if available
if system("which ag") != ''
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
    set grepprg=ag\ --nogroup\ --nocolor\ --column\ --smart-case
else
    set grepprg=grep\ -nIr\ --exclude-dir\ .git\ $*\ /dev/null
endif

" Don't let pyflake clear the quickfix list on buffer change
let g:pyflakes_use_quickfix = 0

" ,/ to ack around
nnoremap <leader>/ :call SuperSlash()<CR>

function! SuperSlash()
	let ackin = input(",/")
	if ackin == ''
		echo "nothing to search"
		return
	endif
	execute 'Ack! ' . ackin
	let @/ = ackin
	if len(getqflist()) != 0
		set hlsearch
	else
		echo "string '" . ackin . "' not found"
		cclose
	endif
endfunction

" ,* to grep the current word in the work dir
nnoremap <leader>* :call SuperStar()<CR>

function! SuperStar()
	let s = expand("<cword>")
	let @/ = '\<' . s . '\>'
	execute 'Ack! \\b' . s . '\\b'
	set hlsearch
endfunction


" ,n and ,N to scroll around results
nnoremap <leader>n :cnfile<CR>
nnoremap <leader>N :cpfile<CR>

"}}}

" Utility macros {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" inject a Python breakpoint
nnoremap <leader>b Oimport pdb; pdb.set_trace()<ESC>^

" w!! if you forget to sudo before saving
cmap w!! w !sudo tee % >/dev/null

" piro: show/delete trailing spaces
command! ShowTrail /\s\+$
command! NoTrail %s/\s\+$//

" convert placeholders from psycopg to psql style and back
command! PHFromPy %s/%(\([^)]*\))s/:\1/g
command! PHToPy %s/\([^:]\):\([a-z0-9_][a-z0-9_]*\)/\1%(\2)s/g

" create reST titles
nmap <leader>= <ESC>yypVr=
nmap <leader>- <ESC>yypVr-
nmap <leader>^ <ESC>yypVr^

" Delete all the hidden buffers
" from http://stackoverflow.com/questions/8450919/how-can-i-delete-all-hidden-buffers
function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction

command! BDH call DeleteHiddenBuffers()
command! BDW :windo bd

" vimscript cheatsheet
command! HV echo
    \ "VimScript cheatsheet \n"
    \ "'@x' is the register x. Useful registers are: \n"
    \ "  - \" - unnamed \n"
    \ "  - / - last search \n"
    \ "  - 0 - last yanked text \n"
    \ "  - : - last command \n"
    \ "'&ts' is the variable 'ts' \n"
    \ "':@\"' execute the command in the selection \n"

"}}}

" Local configurations {{{
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let hostname = substitute(system('hostname'), '\n$', '', '')

if hostname == 'risotto'

    " ubuntu 14.04 forces tab to 8 chars and expands them
    autocmd FileType python setl tabstop=4 | setl noexpandtab

    " External projects on which spaces should be used anyway
    autocmd BufRead /home/piro/.vimrc set expandtab
    autocmd BufRead /home/piro/etc/* set expandtab
    autocmd BufRead /home/piro/src/psycopg2/* set expandtab
    autocmd BufRead /home/piro/src/pgxnclient/* set expandtab
    autocmd BufRead /home/piro/src/setproctitle/* set expandtab
    autocmd BufRead /home/piro/src/pyrseas/* set expandtab
    autocmd BufRead /home/piro/src/suponoff/* set expandtab

    " open my log file
    command! TODO tabe scp://piro@bart.smithersbet.com//home/piro/todo.txt

    " open a file on the live system
    :nmap <leader>L <ESC>:tabe scp://piro@thecode.gambit//home/duma/

endif

if hostname == 'akela'

    set guifont=Monospace\ 10 " a bit bigger...

endif

if hostname == 'makkuro'

    set guifont=Monospace\ 9 " a bit bigger...

endif

"}}}
