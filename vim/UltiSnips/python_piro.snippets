snippet script "Python script boilerplate" !b
#!/usr/bin/env python
"""${1:Script description here}
"""

import sys

def main():
	pass

if __name__ == '__main__':
	sys.exit(main())

endsnippet

snippet main "Fancy exception handling for scripts" !b
class ScriptError(Exception):
	"""Controlled exception raised by the script."""

if __name__ == '__main__':
	try:
		sys.exit(main())

	except ScriptError, e:
		logger.error("%s", e)
		sys.exit(1)

	except Exception:
		logger.exception("unexpected error")
		sys.exit(1)

	except KeyboardInterrupt:
		logger.info("user interrupt")
		sys.exit(1)
endsnippet

snippet log "Logging boilerplate" !b
import logging
logger = logging.getLogger()
logging.basicConfig(
	level=logging.INFO,
	format='%(levelname)s %(message)s')
endsnippet

snippet arg "Python argparse parsing" !b
def parse_cmdline():
	from argparse import ArgumentParser
	parser = ArgumentParser(description=__doc__)
	parser.add_argument('--opt', metavar="OPT",
		default='XXX',
		help="some option [default: %(default)s]")

	opt = parser.parse_args()

	return opt
endsnippet

snippet logarg "Options to add logging levels to option scripts" !b
# logger.setLevel(opt.loglevel)
g = parser.add_mutually_exclusive_group()
g.add_argument('-q', '--quiet', help="Talk less", dest='loglevel',
	action='store_const', const=logging.WARN, default=logging.INFO)
g.add_argument('-v', '--verbose', help="Talk more", dest='loglevel',
	action='store_const', const=logging.DEBUG, default=logging.INFO)
endsnippet

snippet % "print placeholder" i!
%($1)s$0
endsnippet
